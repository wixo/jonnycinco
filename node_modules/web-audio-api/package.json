{
  "name": "web-audio-api",
  "version": "0.1.5",
  "author": {
    "name": "SÃ©bastien Piquemal",
    "email": "sebpiq@gmail.com"
  },
  "description": "Node.js implementation of Web audio API",
  "repository": {
    "type": "git",
    "url": "https://github.com/sebpiq/node-web-audio-api.git"
  },
  "keywords": [
    "audio",
    "sound",
    "music",
    "web audio",
    "web audio api",
    "dsp"
  ],
  "dependencies": {
    "async": "0.2.x",
    "underscore": "1.4.x",
    "mathjs": "0.9.x",
    "av": "0.2.x",
    "pcm-boilerplate": "*",
    "audiobuffer": "*",
    "speaker": "0.0.x"
  },
  "optionalDependencies": {
    "speaker": "0.0.x"
  },
  "analyze": false,
  "devDependencies": {
    "mocha": "*",
    "chai": "1.7.x"
  },
  "license": "MIT",
  "engines": {
    "node": ">=0.10"
  },
  "readme": "Node Web Audio API\n=====================\n\nThis library implements the [web audio API specification](https://dvcs.w3.org/hg/audio/raw-file/tip/webaudio/specification.html) on node.js.\n\nWhy the hell doing that??? I know it sounds crazy, so I guess I'll have to build a case for it, and write some blog posts.\n\nAnd this is not even alpha. Use this library only if you're the adventurous kind.\n\n\nWhat's implemented\n-------------------\n\n- AudioContext(partially)\n- AudioParam (almost there)\n- AudioBufferSourceNode\n- ScriptProcessorNode\n- GainNode\n\n\nWhat's left to do\n------------------\n\nMost of the AudioNodes ...\nMost of many other things ...\n:(\n\n\nInstallation\n--------------\n\n```\nnpm install web-audio-api\n```\n\n\nDemo\n------\n\nGet ready, this is going to blow up your mind :\n\n```\nnode test/manual-testing/AudioContext-sound-output.js\n```\n\n\nStreaming audio\n-----------------\n\n`AudioContext` just writes PCM data to a node writable stream. The default stream is a stream created with `Speaker`, which plays the audio back to your soundcard. But you can use any writable stream, file, including the `stdin` of a child process.\n\nFor example, here is an example for streaming audio to an [icecast](http://www.icecast.org/) server, using [ices](http://www.icecast.org/ices.php) :\n\n```\nvar spawn = require('child_process').spawn\n  , AudioContext = require('web-audio-api').AudioContext\n  , context = new AudioContext()\n\nvar ices = spawn('ices', ['ices.xml'])\ncontext.outStream = ices.stdin\n``` \n\nCool huh?\n\n\nExtensions\n-----------\n\nWow! The whole thing is not even half-done that there's already some extensions for it! See the list in [the wiki](https://github.com/sebpiq/node-web-audio-api/wiki/Extra-AudioNode-libraries-for-node-web-audio-api\n).\n\n\nRunning the debugger\n---------------------\n\nRight now everything runs in one process, so if you set a break point in your code, there's going to be a lot of buffer underflows, and you won't be able to debug anything.\n\nOne trick is to kill the `AudioContext` right before the break point, like this:\n\n```javascript\ncontext._kill()\ndebugger\n```\n\nthat way the audio loop is stopped, and you can inspect your objects in peace.\n\n\nRunning the tests\n------------------\n\nTests are written with mocha. To run them, install mocha with :\n\n```\nnpm install -g mocha\n```\n\nAnd in the root folder run :\n\n```\nmocha\n```\n\n\nManual testing\n----------------\n\nTo test the sound output : \n\n```\nnode test/manual-testing/AudioContext-sound-output.js\n```\n\nTo test `AudioParam` against `AudioParam` implemented in a browser, open `test/manual-testing/AudioParam-browser-plots.html` in that browser.\n\n\nChangelog\n-----------\n\n#### 0.1.5\n\n- **AudioNode** and **AudioContext** bug fixes\n\n#### 0.1.4\n\n- **audioports** : bug fixes\n\n#### 0.1.3\n\n- **audioports** : implemented `channelInterpretation` 'speakers'\n- **AudioContext** : added support for mp3 to `decodeAudioData`\n\n#### 0.1.2\n\n- **AudioBufferSourceNode** : handler `onended` implemented\n- **AudioContext** : method `decodeAudioData`, support only for wav\n\n#### 0.1.1\n\n- **ScriptProcessorNode**\n- **AudioBufferSourceNode**\n  - node is killed once it has finished playing\n  - subsequent calls to `start` have no effect\n\n- **AudioContext** : method `collectNodes`\n- **audioports** : bug fixes\n\n#### 0.1.0\n\n- **AudioContext** (partial implementation)\n- **AudioParam** (missing unschedule)\n- **AudioBufferSourceNode** (missing onended)\n- **GainNode**\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/sebpiq/node-web-audio-api/issues"
  },
  "homepage": "https://github.com/sebpiq/node-web-audio-api",
  "_id": "web-audio-api@0.1.5",
  "dist": {
    "shasum": "a79d290d29848e34da47c079355c3931139cd750"
  },
  "_from": "web-audio-api@",
  "_resolved": "https://registry.npmjs.org/web-audio-api/-/web-audio-api-0.1.5.tgz"
}
